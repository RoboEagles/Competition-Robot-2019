// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2019.subsystems;


import org.usfirst.frc4579.Robot2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.smartdashboard.*;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class HatchLifter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark lifterMotor;
    private Encoder encoder;
    private PIDController hatchLifter_PID;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public HatchLifter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        lifterMotor = new Spark(2);
        addChild("lifterMotor",lifterMotor);
        lifterMotor.setInverted(false);
        
        encoder = new Encoder(3, 4, false, EncodingType.k4X);
        addChild("encoder",encoder);
        encoder.setDistancePerPulse(1.0);
        encoder.setPIDSourceType(PIDSourceType.kRate);
        
        hatchLifter_PID = new PIDController(0.1, 0.0, 0.0, 0.0, encoder, lifterMotor, 0.02);
        addChild("hatchLifter_PID",hatchLifter_PID);
        hatchLifter_PID.setContinuous(false);
        hatchLifter_PID.setAbsoluteTolerance(0.2);

        hatchLifter_PID.setOutputRange(-1.0, 1.0);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // The gear ratio for the lifter motor
    double gearRatio = 71;

    // Method for moving the lift to the height of the Loading Station
    public void moveToLoading(){
        
    }

        // Method for moving the lift to the height of the first hatch level
    public void moveToFirst(){

    }

    // Method for moving the lift to the height of the the second hatch level
    public void moveToSecond(){

    }

    // Enables/disables the PID controller so it doesn't run 
    // while the operator is manually controlling the lift system
    public void enableIntervals(){
        if(hatchLifter_PID.isEnabled()){
            hatchLifter_PID.disable();
        }
        else{
            hatchLifter_PID.enable();
        }
    }

    public void moveArmUp(){
        lifterMotor.set(1);
    }

    public void moveArmDown(){
        lifterMotor.set(-.5);
    }

    public void stop(){
        lifterMotor.stopMotor();
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

