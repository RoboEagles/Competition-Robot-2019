// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.Robot2019.subsystems;


import org.usfirst.frc4579.Robot2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Vision extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Vision() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    	// final int resolution_HEIGHT = 320;
	// final int resolution_WIDTH = 240;
	
	// UsbCamera mainCamera;
	// UsbCamera secondCamera;
	
	// CvSink inputStream;
	// CvSource outputStream;
	// Mat image = new Mat();
	
	// short currentCamera;
	// String cameraName;
	
	// //Initializes the vision subsystem
	// public void initVision(){
	// 	initCamera();
	// 	cameraThread.start();
	// 	System.out.println("Vision: ***Finished initializing Vision subsystem***");
	// }
	
	// //Thread that runs all the camera code
	// Thread cameraThread = new Thread(() -> {
	// 	System.out.println("Starting Camera Thread");
		
	// 	while(!Thread.interrupted()){
	// 		updateImage();
	// 	}
	// });
	
	// //Sets the camera settings, such as resolution and FPS
	// public void initCamera(){
	// 	mainCamera = new UsbCamera("Main Camera", 0);
	// 	secondCamera = new UsbCamera("Second Camera", 1);
		
	// 	inputStream = CameraServer.getInstance().getVideo(mainCamera);
	// 	outputStream = CameraServer.getInstance().putVideo("Camera", resolution_HEIGHT, resolution_WIDTH);

	// 	cameraName = mainCamera.getName();

	// 	// Initializes the settings for the camera
	// 	mainCamera.setResolution(resolution_HEIGHT,resolution_WIDTH);
	// 	mainCamera.setFPS(30);
		
	// 	secondCamera.setResolution(resolution_HEIGHT,resolution_WIDTH);
	// 	secondCamera.setFPS(30);
	// }
	
	// Switches which camera is set as the input stream
	public void switchCamera(){
		// currentCamera = (short) ((++currentCamera)%2);
		
		// System.out.println("Now running camera #" + currentCamera);
		
		// switch (currentCamera){
		// 	case 0:
		// 		inputStream.setSource(mainCamera);
		// 		cameraName = mainCamera.getName();
		// 		break;
		// 	case 1:
		// 		inputStream.setSource(secondCamera);
		// 		cameraName = secondCamera.getName();
		// 		break;
		// }
	}

	// // Pulls an image from the input stream and puts it into the output stream
	// public void updateImage(){		
	// 	// Prints the name of the camera in use onto the SmartDashboard
	// 	SmartDashboard.putString("Camera in use: ", cameraName);
		
	// 	// Attempts to get a frame from the camera and show it on the SmartDashboard
	// 	try{
	// 		// Tries to get frame from a camera
	// 		inputStream.grabFrame(image);
			
	// 		// Tries to put a frame onto the output stream
	// 		outputStream.putFrame(image);
	// 	}
	// 	// Runs if camera frame couldn't be received
	// 	catch(Exception e){
	// 		System.out.println("Couldn't get frame from input stream");
	// 	}
	// }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

